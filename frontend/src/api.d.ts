/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/account/": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Librarian"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LogIn"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Jwt"];
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/challenge/": {
    get: {
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChallengeResponseMessage"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ChallengeRequestMessage"];
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/categories/": {
    get: {
      parameters: {
        query?: {
          name?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Category"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CategoryRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Category"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/categories/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Category"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CategoryPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Category"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/books/": {
    get: {
      parameters: {
        query?: {
          title?: string;
          description?: string;
          category_id?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Book"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Book"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/books/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Book"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Book"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/authors/": {
    get: {
      parameters: {
        query?: {
          name?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Author"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthorRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Author"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/authors/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Author"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthorPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Author"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/book_authors/": {
    get: {
      parameters: {
        query?: {
          book_id?: number;
          author_id?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BookAuthor"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookAuthorRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["BookAuthor"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/book_authors/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BookAuthor"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookAuthorPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BookAuthor"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/publishers/": {
    get: {
      parameters: {
        query?: {
          name?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Publisher"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PublisherRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Publisher"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/publishers/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Publisher"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PublisherPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Publisher"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/book_copies/": {
    get: {
      parameters: {
        query?: {
          year_published?: number;
          book_id?: number;
          publisher_id?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BookCopy"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookCopyRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["BookCopy"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/book_copies/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BookCopy"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookCopyPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["BookCopy"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/librarians/": {
    get: {
      parameters: {
        query?: {
          username?: string;
          password?: string;
          admin?: boolean;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Librarian"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LibrarianRaw"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Librarian"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
  };
  "/librarians/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Librarian"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LibrarianPartial"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Librarian"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Unprocessable Entity */
        422: {
          content: never;
        };
        default: components["responses"]["DEFAULT_ERROR"];
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      /** @description Error code */
      code?: number;
      /** @description Error name */
      status?: string;
      /** @description Error message */
      message?: string;
      /** @description Errors */
      errors?: Record<string, never>;
    };
    PaginationMetadata: {
      total?: number;
      total_pages?: number;
      first_page?: number;
      last_page?: number;
      page?: number;
      previous_page?: number;
      next_page?: number;
    };
    Librarian: {
      username: string;
      password: string;
      admin?: boolean;
    };
    LogIn: {
      username: string;
      password: string;
    };
    Jwt: {
      token: string;
    };
    ChallengeResponse: {
      hash: string;
      text: string;
    };
    ChallengeResponseMessage: {
      response?: components["schemas"]["ChallengeResponse"];
    };
    ChallengeRequest: {
      hash: string;
      image: string;
    };
    ChallengeRequestMessage: {
      request?: components["schemas"]["ChallengeRequest"];
      token?: string;
    };
    Category: {
      id: number;
      name: string;
    };
    CategoryRaw: {
      id: number;
      name: string;
    };
    CategoryPartial: {
      id?: number;
      name?: string;
    };
    Book: {
      id: number;
      title: string;
      description?: string;
      category?: components["schemas"]["Category"];
      category_id?: number;
    };
    BookRaw: {
      id: number;
      title: string;
      description?: string;
      category_id?: number;
    };
    BookPartial: {
      id?: number;
      title?: string;
      description?: string;
      category_id?: number;
    };
    Author: {
      id: number;
      name: string;
    };
    AuthorRaw: {
      id: number;
      name: string;
    };
    AuthorPartial: {
      id?: number;
      name?: string;
    };
    BookAuthor: {
      id: number;
      book: components["schemas"]["Book"];
      book_id: number;
      author: components["schemas"]["Author"];
      author_id: number;
    };
    BookAuthorRaw: {
      id: number;
      book_id: number;
      author_id: number;
    };
    BookAuthorPartial: {
      id?: number;
      book_id?: number;
      author_id?: number;
    };
    Publisher: {
      id: number;
      name: string;
    };
    PublisherRaw: {
      id: number;
      name: string;
    };
    PublisherPartial: {
      id?: number;
      name?: string;
    };
    BookCopy: {
      id: number;
      year_published?: number;
      book: components["schemas"]["Book"];
      book_id: number;
      publisher: components["schemas"]["Publisher"];
      publisher_id: number;
    };
    BookCopyRaw: {
      id: number;
      year_published?: number;
      book_id: number;
      publisher_id: number;
    };
    BookCopyPartial: {
      id?: number;
      year_published?: number;
      book_id?: number;
      publisher_id?: number;
    };
    LibrarianRaw: {
      username: string;
      password: string;
      admin?: boolean;
    };
    LibrarianPartial: {
      username?: string;
      password?: string;
      admin?: boolean;
    };
  };
  responses: {
    /** @description Default error response */
    DEFAULT_ERROR: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
